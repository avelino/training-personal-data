{:paths ["src" "test"]
 :deps {;; Core dependencies
        org.babashka/http-client {:mvn/version "0.4.15"}
        cheshire/cheshire {:mvn/version "5.12.0"}
        com.taoensso/timbre {:mvn/version "6.3.1"}
        
        ;; ML and Data Analysis (existing)
        org.scicloj/noj {:mvn/version "2-beta4"}
        scicloj/tablecloth {:mvn/version "7.021"}
        scicloj/metamorph {:mvn/version "0.2.0"}
        techascent/tech.ml.dataset {:mvn/version "7.021"}
        
        ;; Web Dashboard Dependencies (optional for CI)
        ring/ring-core {:mvn/version "1.9.6"}
        ring/ring-jetty-adapter {:mvn/version "1.9.6"}
        ring/ring-defaults {:mvn/version "0.3.4"}
        ring/ring-json {:mvn/version "0.5.1"}
        compojure/compojure {:mvn/version "1.7.0"}
        hiccup/hiccup {:mvn/version "2.0.0-RC3"}
        
        ;; Additional utilities
        clj-time/clj-time {:mvn/version "0.15.2"}}

 :tasks
 {:requires ([babashka.fs :as fs])
  :init (do
          (def version "1.0.0"))

  run:oura {:doc "Run ouraring with batch processing"
            :task (do
                    (println "\nRun ouraring with batch processing")
                    (let [args *command-line-args*
                          batch-size (or (nth args 2 nil) "50")]
                      (shell (format "bb -cp src -m training-personal-data.ouraring %s %s --batch-size %s"
                                     (first args) (second args) batch-size))))}

  run:ml {:doc "Run ML analysis on Oura Ring data"
          :task (do
                  (println "\nRunning ML analysis")
                  (let [args *command-line-args*]
                    (shell (format "bb -cp src -m training-personal-data.ml.core %s %s"
                                   (first args) (second args)))))}

  run:week-insight {:doc "Generate weekly insights from Oura Ring data using GPT"
                    :task (do
                            (println "\nGenerating weekly insights from Oura Ring data")
                            (let [args *command-line-args*]
                              (shell (format "bb -cp src -m training-personal-data.insights.week %s"
                                             (first args)))))}

  run:dashboard {:doc "Start the web dashboard server"
                 :task (do
                         (println "\nStarting web dashboard...")
                         (shell "bb -cp src -m training-personal-data.web.dashboard"))}

  test {:doc "Run all tests"
        :task (do
                (println "\nRunning tests...")
                (shell "bb -cp test:src -m training-personal-data.test-runner"))}

  test:pipeline {:doc "Run pipeline tests only"
                 :task (do
                         (println "\nRunning pipeline tests...")
                         (shell "bb -cp test:src -e \"(require '[training-personal-data.core.pipeline-test]) (clojure.test/run-tests 'training-personal-data.core.pipeline-test)\""))}

  test:working {:doc "Run only working tests"
                :task (do
                        (println "\nRunning working tests...")
                        (shell "bb test:pipeline"))}

  test:core {:doc "Run core tests without web dependencies"
             :task (do
                     (println "\nRunning core tests...")
                     (shell "bb -cp test:src -e \"
                       (require '[clojure.test :as t])
                       (require '[training-personal-data.core.pipeline-test])
                       (require '[training-personal-data.cache-test])
                       (require '[training-personal-data.resilience-test])
                       (t/run-tests 'training-personal-data.core.pipeline-test
                                    'training-personal-data.cache-test
                                    'training-personal-data.resilience-test)
                     \""))}

  health:check {:doc "Check system health and display statistics"
                :task (do
                        (println "\nChecking system health...")
                        (shell "bb -cp src -e \"
                          (require '[training-personal-data.core.pipeline :as pipeline])
                          (require '[training-personal-data.cache :as cache])
                          (require '[training-personal-data.resilience :as resilience])
                          (require '[training-personal-data.db :as db])
                          (require '[cheshire.core :as json])
                          (println (json/generate-string (pipeline/get-pipeline-health) {:pretty true}))
                        \""))}

  cache:clear {:doc "Clear all cached data"
               :task (do
                       (println "\nClearing cache...")
                       (shell "bb -cp src -e \"
                         (require '[training-personal-data.cache :as cache])
                         (let [cleared (cache/clear!)]
                           (println (str 'Cleared ' cleared ' cache entries')))
                       \""))}

  cache:stats {:doc "Show cache statistics"
               :task (do
                       (println "\nCache statistics:")
                       (shell "bb -cp src -e \"
                         (require '[training-personal-data.cache :as cache])
                         (require '[cheshire.core :as json])
                         (println (json/generate-string (cache/get-stats) {:pretty true}))
                       \""))}

  resilience:stats {:doc "Show resilience statistics (circuit breakers, rate limiters)"
                    :task (do
                            (println "\nResilience statistics:")
                            (shell "bb -cp src -e \"
                              (require '[training-personal-data.resilience :as resilience])
                              (require '[cheshire.core :as json])
                              (println (json/generate-string (resilience/get-resilience-stats) {:pretty true}))
                            \""))}

  db:pool-stats {:doc "Show database connection pool statistics"
                 :task (do
                         (println "\nDatabase pool statistics:")
                         (shell "bb -cp src -e \"
                           (require '[training-personal-data.db :as db])
                           (require '[cheshire.core :as json])
                           (println (json/generate-string (db/get-pool-stats) {:pretty true}))
                         \""))}}}
